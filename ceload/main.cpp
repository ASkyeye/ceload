#include <iostream>
#include <fstream>
#include <filesystem>
#include <Windows.h>
#include <tlhelp32.h>

namespace fs = std::filesystem;

static wchar_t CHEATENGINE_PATH[] = L"C:\\Program Files\\Cheat Engine 7.3\\cheatengine-x86_64.exe";
static PVOID   TEXT_ADDRESS       = reinterpret_cast<PVOID>(0x0000000000401000);
static SIZE_T  TEXT_SIZE          = 0x000000000071E000;
static PVOID   ENTRYPOINT_ADDRESS = reinterpret_cast<PVOID>(0x0000000000403CD0);

// Shellcode generated via scripts\shellcode.py
const std::uint8_t SHELLCODE[] =
{
    0x48, 0x33, 0xc9, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60, 0x00,
    0x00, 0x00, 0x48, 0x8b, 0x40, 0x18, 0x48, 0x8b, 0x70, 0x20,
    0x48, 0xad, 0x48, 0x96, 0x48, 0xad, 0x48, 0x8b, 0x58, 0x20,
    0x4d, 0x33, 0xc0, 0x44, 0x8b, 0x43, 0x3c, 0x49, 0x8b, 0xd0,
    0x48, 0x03, 0xd3, 0x44, 0x8b, 0x82, 0x88, 0x00, 0x00, 0x00,
    0x4c, 0x03, 0xc3, 0x48, 0x33, 0xf6, 0x41, 0x8b, 0x70, 0x20,
    0x48, 0x03, 0xf3, 0x48, 0x33, 0xc9, 0x49, 0xb9, 0x47, 0x65,
    0x74, 0x50, 0x72, 0x6f, 0x63, 0x41, 0x48, 0xff, 0xc1, 0x48,
    0x33, 0xc0, 0x8b, 0x04, 0x8e, 0x48, 0x03, 0xc3, 0x4c, 0x39,
    0x08, 0x75, 0xef, 0x48, 0x33, 0xf6, 0x41, 0x8b, 0x70, 0x24,
    0x48, 0x03, 0xf3, 0x66, 0x8b, 0x0c, 0x4e, 0x48, 0x33, 0xf6,
    0x41, 0x8b, 0x70, 0x1c, 0x48, 0x03, 0xf3, 0x48, 0x33, 0xd2,
    0x8b, 0x14, 0x8e, 0x48, 0x03, 0xd3, 0x48, 0x8b, 0xfa, 0x48,
    0xc7, 0xc1, 0x61, 0x72, 0x79, 0x41, 0x51, 0x48, 0xb9, 0x4c,
    0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x51, 0x48, 0x8b,
    0xd4, 0x48, 0x8b, 0xcb, 0x48, 0x83, 0xec, 0x30, 0xff, 0xd7,
    0x48, 0x83, 0xc4, 0x30, 0x48, 0x83, 0xc4, 0x10, 0x48, 0x8b,
    0xf0, 0x49, 0xbc, 0x6c, 0x6f, 0x6c, 0x2e, 0x64, 0x6c, 0x6c,
    0x00, 0x41, 0x54, 0x48, 0x8b, 0xcc, 0x48, 0x83, 0xec, 0x30,
    0xff, 0xd6, 0x48, 0x83, 0xc4, 0x38, 0xc3
};

int main()
{
    wchar_t path[MAX_PATH] = { 0 };
    GetModuleFileNameW(nullptr, path, MAX_PATH);

    const auto current_path = fs::path{ path };
    const auto ce_path = fs::path{ CHEATENGINE_PATH };

    // Copy the loader to CheatEngine's current working directory
    std::ifstream in(current_path.parent_path() / "loader.dll", std::ios::binary);
    std::ofstream out(ce_path.parent_path() / "lol.dll", std::ios::binary);
    out << in.rdbuf();
    out.close();
    in.close();

    // Start CheatEngine in a suspended state
    STARTUPINFO si{};
    PROCESS_INFORMATION pi{};
    CreateProcessW(
        NULL, ce_path.wstring().data(),
        NULL, NULL, TRUE, CREATE_SUSPENDED, NULL,
        ce_path.parent_path().wstring().data(),
        &si, &pi);

    // Set .text section to RWX
    DWORD old_flags;
    VirtualProtect(
        reinterpret_cast<LPVOID>(&TEXT_ADDRESS), TEXT_SIZE,
        PAGE_EXECUTE_READWRITE, &old_flags);

    // Write shellcode to entrypoint
    SIZE_T bytes_written;
    WriteProcessMemory(
        pi.hProcess, ENTRYPOINT_ADDRESS,
        SHELLCODE, sizeof(SHELLCODE), &bytes_written);

    // Resume main thread to execute shellcode
    ResumeThread(pi.hThread);

    // Wait for threads to finish and close all handles
    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);

    return 0;
}