#include <iostream>

/*
 * To bypass CheatEngine's checks we try to make us as legit as possible
 * CheatEngine employs a couple checks to check for the integrity of the calling process
 * 
 It performs 3 major checks:
 * 1. Check whether the calling process matches a signature generated by the owner [Reference: CheckSignature]
 *    - We bypass this by starting the original executable as it's an on-disk check
 * 2. Check whether the process has been tampered with [Reference: TestProcess]
 *    - We bypass this by restoring the bytes from the on-disk file
 * 3. Check whether the calling thread comes from within the .text segment [Reference: TestProcess]
 *    - We bypass this by making sure we spawn the threads from the .text segment
 * 
 * This task is split into a few steps:
 * 1. Start the original CheatEngine process in a suspended state
 * 2. We patch our shellcode into CheatEngine's entrypoint
 *    - This is faciliated by the fact that CheatEngine is loaded without ASLR
 * 3. We then resume all threads
 * 4. The shellcode will load our DLL
 * 5. Now the loader performs a few more tasks:
 *    1. Prepare the registry, namely the A, B, C and D values
 *    2. Start the driver service
 *    3. Copy the original bytes from the .text section into our process
 *    4. Grab a handle to the driver
 */

int main()
{
    std::cout << "Hello World!\n";
}